# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

networks:
    privnet:

services:

    zookeeper0:
        extends:
            file: ../base/docker-compose-base.yaml
            service: zookeeper
        container_name: zookeeper0
        environment:
            - ZOO_MY_ID=1
            - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888 
        networks:
          - privnet

    zookeeper1:
        extends:
            file: ../base/docker-compose-base.yaml
            service: zookeeper
        container_name: zookeeper1
        environment:
            - ZOO_MY_ID=2
            - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888 
        networks:
          - privnet

    zookeeper2:
        extends:
            file: ../base/docker-compose-base.yaml
            service: zookeeper
        container_name: zookeeper2
        environment:
            - ZOO_MY_ID=3
            - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888 
        networks:
          - privnet

    kafka0:
        extends:
            file: ../base/docker-compose-base.yaml
            service: kafka
        container_name: kafka0
        environment:
            - KAFKA_BROKER_ID=0
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
        depends_on:
            - zookeeper0
            - zookeeper1
            - zookeeper2                       
        networks:
          - privnet

    kafka1:
        extends:
            file: ../base/docker-compose-base.yaml
            service: kafka
        container_name: kafka1
        environment:
            - KAFKA_BROKER_ID=1
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
        depends_on:
            - zookeeper0
            - zookeeper1
            - zookeeper2
        networks:
          - privnet

    kafka2:
        extends:
            file: ../base/docker-compose-base.yaml
            service: kafka
        container_name: kafka2
        environment:
            - KAFKA_BROKER_ID=2
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
        depends_on:
            - zookeeper0
            - zookeeper1
            - zookeeper2
        networks:
          - privnet

    ca.org1.example.com:
        image: hyperledger/fabric-ca:x86_64-1.1.0-preview
        environment:
            - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
            - FABRIC_CA_SERVER_CA_NAME=ca.org1.example.com
            - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca/ca.org1.example.com-cert.pem
            - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/ca/CA1_PRIVATE_KEY

            - FABRIC_CA_SERVER_TLS_ENABLED=true
            - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/tlsca/tlsca.org1.example.com-cert.pem
            - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/tlsca/TLS1_PRIVATE_KEY
        ports:
            - "7054:7054"
        command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/ca/CA1_PRIVATE_KEY -b admin:adminpw -d ${ORG_HYPERLEDGER_FABRIC_CA_TLS} --tls.certfile /etc/hyperledger/fabric-ca-server-config/tlsca/tlsca.org1.example.com-cert.pem --tls.keyfile /etc/hyperledger/fabric-ca-server-config/tlsca/TLS1_PRIVATE_KEY -d'
        # command: sh -c 'fabric-ca-server start -b admin:adminpw -d'        
        
        volumes:
            - ../../artifacts/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config/ca/
            - ../../artifacts/crypto-config/peerOrganizations/org1.example.com/tlsca/:/etc/hyperledger/fabric-ca-server-config/tlsca/
        container_name: ca.org1.example.com
        networks:
            - privnet

    ca.org2.example.com:
        image: hyperledger/fabric-ca:x86_64-1.1.0-preview
        environment:
            - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
            - FABRIC_CA_SERVER_CA_NAME=ca.org2.example.com
            - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca/ca.org2.example.com-cert.pem
            - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/ca/CA2_PRIVATE_KEY

            - FABRIC_CA_SERVER_TLS_ENABLED=true
            - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/tlsca/tlsca.org2.example.com-cert.pem
            - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/tlsca/TLS2_PRIVATE_KEY
        ports:
            - "8054:7054"
        command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca/ca.org2.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/ca/CA2_PRIVATE_KEY -b admin:adminpw -d ${ORG_HYPERLEDGER_FABRIC_CA_TLS} --tls.certfile /etc/hyperledger/fabric-ca-server-config/tlsca/tlsca.org2.example.com-cert.pem --tls.keyfile /etc/hyperledger/fabric-ca-server-config/tlsca/TLS2_PRIVATE_KEY -d'
        # command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
        volumes:
            - ../../artifacts/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config/ca/
            - ../../artifacts/crypto-config/peerOrganizations/org2.example.com/tlsca/:/etc/hyperledger/fabric-ca-server-config/tlsca/  
        container_name: ca.org2.example.com
        networks:
            - privnet

    orderer0.example.com:
        extends:
            file: ../base/docker-compose-base.yaml
            service: orderer
        container_name: orderer0.example.com
        environment:
            - ORDERER_HOST=orderer0.example.com
            - CONFIGTX_ORDERER_ORDERERTYPE=kafka
            - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092]
            - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
            - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
            - ORDERER_KAFKA_VERBOSE=true
            - ORDERER_GENERAL_GENESISPROFILE=TwoOrgsGenesisKafka
        volumes:
            - ../../artifacts/crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/fabric/orderer/msp
            - ../../artifacts/crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls:/var/hyperledger/fabric/orderer/tls
        depends_on:
            - kafka0
            - kafka1
            - kafka2
        networks:
          - privnet
        ports:
          - 7050:7050

    orderer1.example.com:
        extends:
            file: ../base/docker-compose-base.yaml
            service: orderer
        container_name: orderer1.example.com
        environment:
            - ORDERER_HOST=orderer1.example.com
            - CONFIGTX_ORDERER_ORDERERTYPE=kafka
            - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092]
            - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
            - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
            - ORDERER_KAFKA_VERBOSE=true
            - ORDERER_GENERAL_GENESISPROFILE=TwoOrgsGenesisKafka         
        volumes:
            - ../../artifacts/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/fabric/orderer/msp
            - ../../artifacts/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls:/var/hyperledger/fabric/orderer/tls
        depends_on:
            - kafka0
            - kafka1
            - kafka2
        networks:
          - privnet
        ports:
          - 8050:7050

    orderer2.example.com:
        extends:
            file: ../base/docker-compose-base.yaml
            service: orderer
        container_name: orderer2.example.com
        environment:
        
            - ORDERER_HOST=orderer2.example.com
            - CONFIGTX_ORDERER_ORDERERTYPE=kafka
            - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092]
            - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
            - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
            - ORDERER_KAFKA_VERBOSE=true
            - ORDERER_GENERAL_GENESISPROFILE=TwoOrgsGenesisKafka          
        volumes:
            - ../../artifacts/crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/fabric/orderer/msp
            - ../../artifacts/crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls:/var/hyperledger/fabric/orderer/tls
        depends_on:
            - kafka0
            - kafka1
            - kafka2
        networks:
          - privnet
        ports:
          - 9050:7050

    couchdb01:
        extends:
            file: ../base/docker-compose-base.yaml
            service: couchdb
        container_name: couchdb01
        environment:
            - COUCHDB_USER=couchdb01user
            - COUCHDB_PASSWORD=nothingcomplex@123
        # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
        # for example map it to utilize Fauxton User Interface in dev environments.
        ports:
          - 7984:5984
        networks:
          - privnet

    couchdb02:
        extends:
            file: ../base/docker-compose-base.yaml
            service: couchdb
        container_name: couchdb02
        environment:
            - COUCHDB_USER=couchdb02user
            - COUCHDB_PASSWORD=nothingcomplex@123
        # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
        # for example map it to utilize Fauxton User Interface in dev environments.
        ports:
          - 8984:5984
        networks:
          - privnet

    couchdb11:
        extends:
            file: ../base/docker-compose-base.yaml
            service: couchdb
        container_name: couchdb11
        environment:
            - COUCHDB_USER=couchdb11user
            - COUCHDB_PASSWORD=nothingcomplex@123
        # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
        # for example map it to utilize Fauxton User Interface in dev environments.
        ports:
          - 9984:5984
        networks:
          - privnet

    couchdb12:
        extends:
            file: ../base/docker-compose-base.yaml
            service: couchdb
        container_name: couchdb12
        environment:
            - COUCHDB_USER=couchdb12user
            - COUCHDB_PASSWORD=nothingcomplex@123
        # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
        # for example map it to utilize Fauxton User Interface in dev environments.
        ports:
          - 10984:5984
        networks:
          - privnet

    peer0.org1.example.com:
        extends:
            file: ../base/docker-compose-base.yaml
            service: peer
        container_name: peer0.org1.example.com
        environment:
            - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.example.com:7052
            - CORE_PEER_ID=peer0.org1.example.com

            - CORE_PEER_ENDORSER_ENABLED=true
            
            - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
            - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER0_ORG1}
            - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER0_ORG1}

            - CORE_PEER_LOCALMSPID=Org1MSP
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb01:5984
            - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=couchdb01user
            - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=nothingcomplex@123
        volumes:
            - ../../artifacts/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
            - ../../artifacts/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
        depends_on:
            - orderer0.example.com
            - orderer1.example.com
            - orderer2.example.com
            - couchdb01
        networks:
          - privnet
        ports:
          - 7051:7051
          - 7053:7053

    peer1.org1.example.com:
        extends:
            file: ../base/docker-compose-base.yaml
            service: peer
        container_name: peer1.org1.example.com
        environment:
            - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.example.com:7052
            - CORE_PEER_ID=peer1.org1.example.com

            - CORE_PEER_ENDORSER_ENABLED=true

            - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051            
            - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER1_ORG1}
            - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER1_ORG1}

            - CORE_PEER_LOCALMSPID=Org1MSP
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb11:5984
            - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=couchdb11user
            - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=nothingcomplex@123
        volumes:
            - ../../artifacts/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
            - ../../artifacts/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls
        depends_on:
            - orderer0.example.com
            - orderer1.example.com
            - orderer2.example.com
            - peer0.org1.example.com
            - couchdb11
        networks:
          - privnet
        ports:
          - 8051:7051
          - 8053:7053

    peer0.org2.example.com:
        extends:
            file: ../base/docker-compose-base.yaml
            service: peer
        container_name: peer0.org2.example.com
        environment:
            - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org2.example.com:7052
            - CORE_PEER_ID=peer0.org2.example.com

            - CORE_PEER_ENDORSER_ENABLED=true

            - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:7051
            - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER0_ORG2}
            - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER0_ORG2}

            - CORE_PEER_LOCALMSPID=Org2MSP
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb02:5984
            - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=couchdb02user
            - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=nothingcomplex@123
        volumes:
            - ../../artifacts/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
            - ../../artifacts/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls
        depends_on:
            - orderer0.example.com
            - orderer1.example.com
            - orderer2.example.com
            - couchdb02
        networks:
         - privnet
        ports:
          - 9051:7051
          - 9053:7053

    peer1.org2.example.com:
        extends:
            file: ../base/docker-compose-base.yaml
            service: peer
        container_name: peer1.org2.example.com
        environment:
            - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org2.example.com:7052
            - CORE_PEER_ID=peer1.org2.example.com

            - CORE_PEER_ENDORSER_ENABLED=true

            - CORE_PEER_ADDRESS=peer1.org2.example.com:7051
            # - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051            
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:7051            
            - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER1_ORG2}
            - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER1_ORG2}
 
            - CORE_PEER_LOCALMSPID=Org2MSP
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb12:5984
            - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=couchdb12user
            - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=nothingcomplex@123
        volumes:
            - ../../artifacts/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
            - ../../artifacts/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls
        depends_on:
            - orderer0.example.com
            - orderer1.example.com
            - orderer2.example.com
            - peer0.org2.example.com
            - couchdb12
        networks:
          - privnet
        ports:
          - 10051:7051
          - 10053:7053

    cli:
        container_name: cli
        image: hyperledger/fabric-tools:x86_64-1.1.0-preview
        tty: true
        environment:
            - GOPATH=/opt/gopath
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            - CORE_LOGGING_LEVEL=DEBUG
            # TLS settings
            - CORE_PEER_TLS_ENABLED=${CORE_PEER_TLS_ENABLED}
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: /bin/bash -c 'sleep 6000000000000000000'
        volumes:
            - /var/run/:/host/var/run/
            - ../../fabric/examples/chaincode:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode
            - ../../chaincodes:/opt/gopath/src/github.com/hyperledger/fabric-test/chaincodes

            - ../../fabric/common:/opt/gopath/src/github.com/hyperledger/fabric/common
            - ../../fabric/vendor:/opt/gopath/src/github.com/hyperledger/fabric/vendor

            - ../../artifacts/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
            - ../../artifacts/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
            - ../../artifacts/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        ports:
            - '9092'
        depends_on:
          - orderer0.example.com
          - peer0.org1.example.com
          - peer1.org1.example.com
          - peer0.org2.example.com
          - peer1.org2.example.com
        networks:
          - privnet