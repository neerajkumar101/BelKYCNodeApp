# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'
services:

  zookeeper:
    image: hyperledger/fabric-zookeeper:x86_64-1.1.0-preview
    ports:
        - 2181
        - 2888
        - 3888

  kafka:
    image: hyperledger/fabric-kafka:x86_64-1.1.0-preview
    environment:
        - KAFKA_LOG_RETENTION_MS=-1
        - KAFKA_MESSAGE_MAX_BYTES=103809024
        - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
        - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
        - KAFKA_DEFAULT_REPLICATION_FACTOR=${KAFKA_DEFAULT_REPLICATION_FACTOR}
        - KAFKA_MIN_INSYNC_REPLICAS=2
    ports:
        - 9092

  orderer-base:
    image: hyperledger/fabric-orderer:x86_64-1.1.0-preview
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block

      - CONFIGTX_ORDERER_ORDERERTYPE=kafka
      - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_VERBOSE=true
      - CONFIGTX_ORDERER_BATCHSIZE_MAXMESSAGECOUNT=${CONFIGTX_ORDERER_BATCHSIZE_MAXMESSAGECOUNT}
      - CONFIGTX_ORDERER_BATCHTIMEOUT=${CONFIGTX_ORDERER_BATCHTIMEOUT}
      
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/crypto/orderer/msp
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/crypto/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/crypto/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/crypto/orderer/tls/ca.crt, /etc/hyperledger/crypto/peerOrg1/tls/ca.crt, /etc/hyperledger/crypto/peerOrg2/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderers
    command: orderer
    volumes:
        - ./channel:/etc/hyperledger/configtx
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/:/etc/hyperledger/crypto/peerOrg1
        - ./channel/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/:/etc/hyperledger/crypto/peerOrg2

    # orderer:
    #     image: hyperledger/fabric-orderer:x86_64-1.1.0-preview
    #     environment:
    #         - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_privnet
    #         - ORDERER_HOME=/var/hyperledger/fabric/orderer
    #         - ORDERER_GENERAL_LOGLEVEL=debug

    #         - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/fabric/orderer/msp
    #         - ORDERER_GENERAL_LOCALMSPID=OrdererMSP

    #         - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
    #         - ORDERER_GENERAL_LISTENPORT=7050
    #         - ORDERER_GENERAL_LEDGERTYPE=ram
    #         - ORDERER_GENERAL_GENESISMETHOD=file
    #         - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/fabric/orderer/orderer.genesis.block

    #         # - CONFIGTX_ORDERER_ADDRESSES=[127.0.0.1:7050]
    #         # TLS settings
    #         - ORDERER_GENERAL_TLS_ENABLED=${ORDERER_GENERAL_TLS_ENABLED}
    #         - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/fabric/orderer/tls/server.key            
    #         - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/fabric/orderer/tls/server.crt
    #         - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/fabric/orderer/tls/ca.crt]
    #     volumes: 
    #         - ../../artifacts/channel-artifacts/genesis.block:/var/hyperledger/fabric/orderer/orderer.genesis.block
    #         - ../../artifacts/crypto-config/ordererOrganizations/example.com/orderers:/var/hyperledger/fabric/orderer/crypto
    #     working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    #     command: orderer
    #     ports:
    #       - '7050'

  couchdb:
    image: hyperledger/fabric-couchdb:x86_64-1.1.0-preview

  peer-base:
    image: hyperledger/fabric-peer:x86_64-1.1.0-preview
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=artifacts_default
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/crypto/peer/msp
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/crypto/peer/tls/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/crypto/peer/tls/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/crypto/peer/tls/ca.crt
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
        - /var/run/:/host/var/run/
